{"ast":null,"code":"import { useHistory } from 'react-router-dom';\nimport axiosInstance from './axiosjuicer';\n\nclass Auth {\n  constructor() {\n    this.authenticated = false;\n  }\n\n  register(uusername, ppassword) {\n    axiosInstance.post('newuser/', {\n      username: uusername,\n      password: ppassword\n    }).then(res => {\n      //const history = useHistory();\n      //window.location.href = theRedirect\n      history.push('/login'); //console.log('DONE')\n    }).catch(err => {\n      alert('Try again');\n    });\n  }\n\n  login(login, ppassword, theRedirect) {\n    // make a function to actually Login\n    axiosInstance.post('token/', {\n      username: login,\n      password: ppassword\n    }).then(res => {\n      localStorage.setItem('access_token', res.data.access);\n      localStorage.setItem('refresh_token', res.data.refresh);\n      localStorage.setItem('theusername', login); //history.push('/issues')\n\n      if (theRedirect) {\n        window.location.href = theRedirect;\n      } else {\n        window.location.href = 'http://127.0.0.1:3000/issues';\n      }\n    }).catch(err => {\n      //console.log(err.response.data['detail']);\n      //console.log('idk man');\n      //console.log(err);\n      alert('Try again');\n    });\n  }\n\n  logout() {\n    // make a function to actually Logout\n    this.authenticated = false;\n    localStorage.clear();\n  }\n\n  isAuthenticated() {\n    return this.authenticated;\n  }\n\n}\n\nexport default new Auth();","map":{"version":3,"sources":["C:/Users/LENOVO S30/Documents/Reactjs/theapp/src/components/auth.js"],"names":["useHistory","axiosInstance","Auth","constructor","authenticated","register","uusername","ppassword","post","username","password","then","res","history","push","catch","err","alert","login","theRedirect","localStorage","setItem","data","access","refresh","window","location","href","logout","clear","isAuthenticated"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA,OAAOC,aAAP,MAA0B,eAA1B;;AAGA,MAAMC,IAAN,CAAW;AACPC,EAAAA,WAAW,GAAG;AACV,SAAKC,aAAL,GAAqB,KAArB;AACH;;AAEDC,EAAAA,QAAQ,CAACC,SAAD,EAAYC,SAAZ,EAAsB;AAC1BN,IAAAA,aAAa,CAACO,IAAd,CAAmB,UAAnB,EAA8B;AAACC,MAAAA,QAAQ,EAACH,SAAV;AAAqBI,MAAAA,QAAQ,EAACH;AAA9B,KAA9B,EAAwEI,IAAxE,CAA8EC,GAAD,IAAQ;AACjF;AACA;AACAC,MAAAA,OAAO,CAACC,IAAR,CAAa,QAAb,EAHiF,CAIjF;AAEH,KAND,EAMGC,KANH,CAMUC,GAAD,IAAS;AACdC,MAAAA,KAAK,CAAC,WAAD,CAAL;AACH,KARD;AASH;;AAEDC,EAAAA,KAAK,CAACA,KAAD,EAAQX,SAAR,EAAmBY,WAAnB,EAA+B;AAAE;AAElClB,IAAAA,aAAa,CAACO,IAAd,CAAmB,QAAnB,EAA4B;AAACC,MAAAA,QAAQ,EAACS,KAAV;AAAiBR,MAAAA,QAAQ,EAACH;AAA1B,KAA5B,EAAkEI,IAAlE,CAAwEC,GAAD,IAAQ;AAC3EQ,MAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCT,GAAG,CAACU,IAAJ,CAASC,MAA9C;AACAH,MAAAA,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAsCT,GAAG,CAACU,IAAJ,CAASE,OAA/C;AACAJ,MAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCH,KAApC,EAH2E,CAI3E;;AACA,UAAGC,WAAH,EAAe;AACXM,QAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuBR,WAAvB;AACH,OAFD,MAEK;AACDM,QAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,8BAAvB;AACH;AAEJ,KAXD,EAWGZ,KAXH,CAWUC,GAAD,IAAS;AACd;AACA;AACA;AACAC,MAAAA,KAAK,CAAC,WAAD,CAAL;AACH,KAhBD;AAiBH;;AAEDW,EAAAA,MAAM,GAAE;AAAE;AACN,SAAKxB,aAAL,GAAqB,KAArB;AACAgB,IAAAA,YAAY,CAACS,KAAb;AACH;;AAEDC,EAAAA,eAAe,GAAE;AACb,WAAO,KAAK1B,aAAZ;AACH;;AA7CM;;AAgDX,eAAe,IAAIF,IAAJ,EAAf","sourcesContent":["import { useHistory } from 'react-router-dom';\r\nimport axiosInstance from './axiosjuicer'\r\n\r\n\r\nclass Auth {\r\n    constructor() {\r\n        this.authenticated = false;\r\n    }\r\n\r\n    register(uusername, ppassword){\r\n        axiosInstance.post('newuser/',{username:uusername, password:ppassword}).then((res) =>{\r\n            //const history = useHistory();\r\n            //window.location.href = theRedirect\r\n            history.push('/login');        \r\n            //console.log('DONE')\r\n            \r\n        }).catch((err) => {\r\n            alert('Try again');\r\n        });\r\n    }\r\n\r\n    login(login, ppassword, theRedirect){ // make a function to actually Login\r\n\r\n        axiosInstance.post('token/',{username:login, password:ppassword}).then((res) =>{\r\n            localStorage.setItem('access_token', res.data.access);\r\n            localStorage.setItem('refresh_token', res.data.refresh);\r\n            localStorage.setItem('theusername', login);\r\n            //history.push('/issues')\r\n            if(theRedirect){\r\n                window.location.href = theRedirect\r\n            }else{\r\n                window.location.href = 'http://127.0.0.1:3000/issues'\r\n            }\r\n            \r\n        }).catch((err) => {\r\n            //console.log(err.response.data['detail']);\r\n            //console.log('idk man');\r\n            //console.log(err);\r\n            alert('Try again');\r\n        });\r\n    }\r\n\r\n    logout(){ // make a function to actually Logout\r\n        this.authenticated = false;\r\n        localStorage.clear();\r\n    }\r\n\r\n    isAuthenticated(){\r\n        return this.authenticated;\r\n    }\r\n}\r\n\r\nexport default new Auth();"]},"metadata":{},"sourceType":"module"}