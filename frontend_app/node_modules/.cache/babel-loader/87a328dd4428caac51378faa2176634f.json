{"ast":null,"code":"import axios from 'axios';\nconst baseURL = 'http://127.0.0.1:8000/api/';\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    Authorization: localStorage.getItem('access_token') ? 'JWT ' + localStorage.getItem('access_token') : null,\n    'Content-Type': 'application/json',\n    accept: 'application/json'\n  }\n});\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, async function (error) {\n  const originalRequest = error.config;\n\n  if (typeof error.response === 'undefined') {\n    alert('A server/network error occurred. ' + 'Looks like CORS might be the problem. ' + 'Sorry about this - we will get it fixed shortly.');\n    return Promise.reject(error);\n  }\n\n  if (error.response.status === 401 && originalRequest.url === baseURL + 'token/refresh/') {\n    window.location.href = '/login';\n    return Promise.reject(error);\n  }\n\n  if (error.response.status === 401 && error.response.data['detail']) {\n    console.log('yo');\n    window.location.href = '/login';\n  }\n\n  if (error.response.data.code === 'token_not_valid' && error.response.status === 401 && error.response.statusText === 'Unauthorized') {\n    const refreshToken = localStorage.getItem('refresh_token');\n\n    if (refreshToken) {\n      const tokenParts = JSON.parse(atob(refreshToken.split('.')[1])); // exp date in token is expressed in seconds, while now() returns milliseconds:\n\n      const now = Math.ceil(Date.now() / 1000);\n      console.log(tokenParts.exp);\n\n      if (tokenParts.exp > now) {\n        return axiosInstance.post('/token/refresh/', {\n          refresh: refreshToken\n        }).then(response => {\n          localStorage.setItem('access_token', response.data.access);\n          localStorage.setItem('refresh_token', response.data.refresh);\n          axiosInstance.defaults.headers['Authorization'] = 'JWT ' + response.data.access;\n          originalRequest.headers['Authorization'] = 'JWT ' + response.data.access;\n          return axiosInstance(originalRequest);\n        }).catch(err => {\n          console.log(err);\n        });\n      } else {\n        console.log('Refresh token is expired', tokenParts.exp, now);\n        window.location.href = '/login/';\n      }\n    } else {\n      console.log('Refresh token not available.');\n      window.location.href = '/login/';\n    }\n  } // specific error handling done elsewhere\n\n\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"sources":["C:/Users/LENOVO S30/Documents/Reactjs/theapp/src/components/axiosjuicer.js"],"names":["axios","baseURL","axiosInstance","create","timeout","headers","Authorization","localStorage","getItem","accept","interceptors","response","use","error","originalRequest","config","alert","Promise","reject","status","url","window","location","href","data","console","log","code","statusText","refreshToken","tokenParts","JSON","parse","atob","split","now","Math","ceil","Date","exp","post","refresh","then","setItem","access","defaults","catch","err"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\nconst baseURL = 'http://127.0.0.1:8000/api/';\r\n\r\nconst axiosInstance = axios.create({\r\n\tbaseURL: baseURL,\r\n\ttimeout: 5000,\r\n\theaders: {\r\n\t\tAuthorization: localStorage.getItem('access_token')\r\n\t\t\t? 'JWT ' + localStorage.getItem('access_token')\r\n\t\t\t: null,\r\n\t\t'Content-Type': 'application/json',\r\n\t\taccept: 'application/json',\r\n\t}, \r\n});\r\n\r\naxiosInstance.interceptors.response.use(\r\n\t(response) => {\r\n\t\treturn response;\r\n\t},\r\n\tasync function (error) {\r\n\t\tconst originalRequest = error.config;\r\n\r\n\t\tif (typeof error.response === 'undefined') {\r\n\t\t\talert(\r\n\t\t\t\t'A server/network error occurred. ' +\r\n\t\t\t\t\t'Looks like CORS might be the problem. ' +\r\n\t\t\t\t\t'Sorry about this - we will get it fixed shortly.'\r\n\t\t\t);\r\n\t\t\treturn Promise.reject(error);\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\terror.response.status === 401 &&\r\n\t\t\toriginalRequest.url === baseURL + 'token/refresh/'\r\n\t\t) {\r\n\t\t\twindow.location.href = '/login';\r\n\t\t\treturn Promise.reject(error);\r\n\t\t}\r\n\r\n\t\tif(error.response.status === 401 && error.response.data['detail']){\r\n\t\t\tconsole.log('yo');\r\n\t\t\twindow.location.href = '/login';\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\terror.response.data.code === 'token_not_valid' &&\r\n\t\t\terror.response.status === 401 &&\r\n\t\t\terror.response.statusText === 'Unauthorized'\r\n\t\t) {\r\n\t\t\tconst refreshToken = localStorage.getItem('refresh_token');\r\n\r\n\t\t\tif (refreshToken) {\r\n\t\t\t\tconst tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\r\n\r\n\t\t\t\t// exp date in token is expressed in seconds, while now() returns milliseconds:\r\n\t\t\t\tconst now = Math.ceil(Date.now() / 1000);\r\n\t\t\t\tconsole.log(tokenParts.exp);\r\n\r\n\t\t\t\tif (tokenParts.exp > now) {\r\n\t\t\t\t\treturn axiosInstance\r\n\t\t\t\t\t\t.post('/token/refresh/', { refresh: refreshToken })\r\n\t\t\t\t\t\t.then((response) => {\r\n\t\t\t\t\t\t\tlocalStorage.setItem('access_token', response.data.access);\r\n\t\t\t\t\t\t\tlocalStorage.setItem('refresh_token', response.data.refresh);\r\n\r\n\t\t\t\t\t\t\taxiosInstance.defaults.headers['Authorization'] =\r\n\t\t\t\t\t\t\t\t'JWT ' + response.data.access;\r\n\t\t\t\t\t\t\toriginalRequest.headers['Authorization'] =\r\n\t\t\t\t\t\t\t\t'JWT ' + response.data.access;\r\n\r\n\t\t\t\t\t\t\treturn axiosInstance(originalRequest);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch((err) => {\r\n\t\t\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log('Refresh token is expired', tokenParts.exp, now);\r\n\t\t\t\t\twindow.location.href = '/login/';\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log('Refresh token not available.');\r\n\t\t\t\twindow.location.href = '/login/';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// specific error handling done elsewhere\r\n\t\treturn Promise.reject(error);\r\n\t}\r\n);\r\n\r\nexport default axiosInstance;"]},"metadata":{},"sourceType":"module"}